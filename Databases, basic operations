=================================================================
					DATABASES
=================================================================
				Overall information
----------------------------------------------------
Database is a container for a data

Many classifications:
- Class	- Desktop, Server, Enterprise
- Organization	- Relational, object, NoSQL
- Purpose	- Operational (OLTP), Data warehouse, Analithycal (OLAP)

Typical
- Relational - MariaDB, MySQL, PostgreSQL, Oracle, MS SQL
- NoSQL - MongoDB, Cassandra, Redis, Couchbase

Database files

They are as follows:
-.opt 		-- options/settings			}  General files 
-.frm 		-- structure				}
-.idb		-- data and indexes				}
-.myd		-- data							}Engine specific files
-.mid		-- indexes						}

File location - /var/lib/mysql
show variables like 'datadir';

Database objects

Table
- Rows and columns
- Constraints
- Indexes

View
- stored logic for reading a data set

Stored Procedures and Functions 

Data Types
Numeric:
- Whole - TINYINT, SMALLINT, MEDIUMINT, INT, BIGINT	}
- Fixed - Decimal									} Exact Numerics 
- Floating - FLOAT, DOUBLE							}

String:
- CHAR, VARCHAR
- TINYTEXT, TEXT, MEDIUMTEXT, LONGTEXT

Date and time
- DATE, TIME, DATETIME, TIMESTAMP
					
					Basic Operations
----------------------------------------------------
Basic DCL, DDL and DML Statements:

Data Definition Language(DDL)		-- used to create, modify and delete database objects

Data Manipulation Language(DML)		-- used to retrieve, insert, update and delete data in database

Data Control Language(DCL)			-- used to control access rights 

Transaction Control Language(TCL)	-- used to control transactions within the database

CREATE (DDL)
-----------------------------------------------------
Create database objects like tables, views, indexes and others

CREATE object_type object_name DEFINITION
!CREATE TABLE T1 (id INT, person_name VARCHAR(100));	-- create a single table
!CREATE VIEW V1 AS SELECT person_name FROM T1; 			-- create a simple view

DROP (DDL)
-----------------------------------------------------
Remove database objects like tables, views, indexes and others

DROP object_type object_name
!DROP TABLE T1		-- drop existing table
!DROP VIEW T!		--drop existing view

SELECT (DML)
-----------------------------------------------------
Read a data set from a table or set of tables or views

!SELECT list_of_colums		-- What?								} Required
!FROM table_or_view			-- From where							}
![[INNER|LEFT|RIGHT] JOIN table_or_view ON criteria]		--enter or shrink data set		}
								} Optional
![GROUP BY group_list]		-- Aggregate the data set										}
![ORDER BY order_list]		-- Sort the result set											}

!SELECT DISTINCT [column] FROM [table name]		-- shows only different values from [table name]
!SELECT COUNT(DISTINCT [column]) FROM [table name]		-- shows how many entries there are in the table

INSERT (DML)
-----------------------------------------------------
Add new row(s) to a table

!INSERT INTO object_name VALUES value_list
!INSERT INTO T1(person_name) VALUES ('John');		-- Insert one row of data
!INSERT INTO T1(person_name) VALUES ('Jim'), ('Ed');		-- Insert two more rows of data

DELETE (DML)
-----------------------------------------------------
Delete data from table

!DELETE FROM object_name [WHERE condition]
!DELETE FROM T1 WHERE person_name='Ed';			-- delete one record
!DELETE FROM T1 						-- delete all records from a table

WHERE filter				
-----------------------------------------------------
Apply a filter on the data set
!The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!
!WHERE clause can be used with NOT - to find any entry that is not in WHERE clause

SQL AND, OR and NOT Operators			
-----------------------------------------------------
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:
- The AND operator displays a record if all the conditions separated by AND are TRUE.
- The OR operator displays a record if any of the conditions separated by OR is TRUE.

!The NOT operator displays a record if the condition(s) is NOT TRUE.

ORDER BY
-----------------------------------------------------
The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

!The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;

NULL Values
-----------------------------------------------------
 A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!
 
!IS NULL Syntax:

SELECT column_names
FROM table_name
WHERE column_name IS NULL;

!IS NOT NULL Syntax
SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL;

UPDATE (DML)
-----------------------------------------------------
Update set of records
!Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. 
If you omit the WHERE clause, all records in the table will be updated!

!UPDATE object_name SET field=value [WHERE filter]
!UPDATE T1 SET salary=salary+100;		-- increase all salaries with 100 units
!UPDATE T1 SET bonus=1000 WHERE eyes_color='blue';	--set bonus for all people with blue eyes to 1000

JOIN (Part of the SELECT statement)
-----------------------------------------------------
Link additional data source based on a condition

LEFT|INNER|RIGHT JOIN source ON condition
!SELECT T1.id, T1.person_name, T2.department_name
!FROM T1
!LEFT JOIN T2 on T1.did=T2.id		-- Joins records from two tables

GRANT (DCL)
-----------------------------------------------------
Give permisssions to a user over an object

GRANT privileges ON object TO user
!GRANT ALL ON DATABASE_1.* TO user@localhost
!IDENTIFIED BY 'Password1'; 					-- Create user and grant permisssions to a database
!FLUSH PRIVILEGES;			-- apply privileges

REVOKE (DCL)
-----------------------------------------------------
Revoke permisssions to a user over an object

REVOKE privileges ON object FROM user
!REVOKE INSERT ON DATABASE_1.* FROM user@localhost			-- Revoke insert permisssions from a user
!FLUSH PRIVILEGES;			-- apply privileges


updatedb
-----------------------------------------------------
updatedb [options]		-- update a database for mlocate
!updatedb			-- update the database
!updatedb -o output.txt		-- write the update to a file

				Database tools
=====================================================
mysql_secure_installation
-----------------------------------------------------
Post-installation wizard used to secure the installed instance

mysql_secure_installation [options]		--syntax to start
!mysql_secure_installation			-- starts the wizard

mysql
-----------------------------------------------------
Client application to communicate with MariaDB daemon

mysql [options]			-- syntax
!mysql -u root -p		-- connect to a local MariaDB daemon
!mysql -u root -p db1 < dump.sql		-- import database backup

mysqldump
-----------------------------------------------------
Tool to extract / backup a database

mysqldump [options]

!mysqldump -u root -p sudemo > sudemo.sql		-- export single database
!mysqldump -u root -p --all-databases > exp.sql 	--export all databases



					MariaDB
----------------------------------------------------
1. sudo yum install -y mariadb mariadb-server		-- installs the client and server part of MariaDB

2. sudo systemctl enable --now mariadb				-- enables the mariadb service

3. sudo mysql_secure_installation 					-- makes password for DB

4. mysql -u root -p									-- enters the database terminal
!show database;				-- shows the database schemas
!create table persons ( id int,  department_id int, person_name varname(50), person_sex char(1), person_salary decimal(15,3) );		--creates table Persons
!show tables;				-- shows the table
!insert into persons ( id int, department_id int, person_name, person_sex, person_salary ) /
values (1, 1, 'John Snow', 'M', 5000), (2, 2, 'Tony James', 'M', 3000), (3, 3, 'Kate Hudson', 'F', 1500), (4, 4, 'Ann Evans', 'F', 3500)		-- adds values to all the table contents
!select id, person_name from persons where person_sex = 'F';		-- shows contents of table where it maches exact variable

!select p.person_name, d.department_name		--selecting alias from database tables
!select p.person_name, d.department_name from persons p inner join departments d on p.department_id = d.id;			--example of inner join
!update persons set department_id = 4 where id=4;			-- updates specific variable when meeting specific statement (id)
!select p.person_name, d.department_name from persons p left join departments d on p.department_id = d.id; 			-- where shows joined table with left one preferences
