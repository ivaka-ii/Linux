=================================================================
    		FILESYSTEM HIERARCHY STANDARTS
=================================================================
/home				-- variable and shareable, contains user data
/root				-- home directory for root user
/bin				-- critical executable files
/sbin				-- similar to bin, but contains programs usually executed by root
/lib				-- contains program libraries
/usr				-- shareable and static. Host binaries, libraries and documentation
/var				-- variable and partly shareable; contains logs, mail spool
/tmp				-- variable and temporary content
/mnt				-- used for mounting of removable media
/media				-- similar to /mnt, but contains subfolders for different media
/dev				-- files, used as interface to the underlying hardware
/proc				-- virtual filesystem that reflects kernel and process status

=================================================================
    		DISK AND PARTITION SCHEMES
=================================================================
Disk Types
-----------------------------------------------------------------
Parallel ARA (PATA) 128 - 1064 Mbps
-looks like /dev/hd[x]
Serial ATA 1,5 - 6 Gbps
-looks like /dev/sd[x]
SCSI small computer system interface
/dev/sd[x] for CD/DVD - /dev/sr[symbol or numer]

Partitioning
-----------------------------------------------------------------
MB 		--1000^2 megabyte
MiB		--1024^2 mebibyte

Special partition types:
RAW partitions
-no regular file system
-used for special purposes, i.e. enterprise databases
-better controw and performance
SWAP partitions		-- when the system don't have enough RAM memory, it transfers the processes into SWAP partitions
-no further separations
-no regular file system
-1-2x RAM size*

Common partitions and filesystem layouts:
Could be separated:
-/boot
-/home
-/opt
-/var
-/tmp
Should be together:
/etc, /bin, /sbin, /lib, /lib64, /dev and /usr*


Master Boot Record(MBR)
-----------------------------------------------------------------
Characteristics
-occupies first 512 bytes
-up to 4 primary partitions
-max size - up to 2TiB/partition
Partition types
-primary
-extended - can have multiple logical drives
-logical

GUID partition Table (GPT)
-----------------------------------------------------------------
Characteritics
-Part of EFI specifications
-has protective MBR
-two copies of the partition table
-up to 128 partitions
-maximum size 8ZiB/partition

Special partition Types
-----------------------------------------------------------------
RAW Partitions		- used directly from software that don't require any filetypes (i.e. enterprise databases)
    - no regular file system
    - better control and performance
SWAP Partitions(can be also partition)
    - no further separation
    - no regular file system
    -1-2x RAM size 
	

lsblk			-- list block devices
fdisk 			-- for MBR partitioning table
fdisk /dev/[harddisk]
gdisk			-- for GPT partitioning table
parted			-- partition manipulation program
dd			-- copy a file, converting and formatting according to the operands
dd if(input file)=[disk partition]/[device] of=[disk partition] bs(block size)=[number][M,K,B] count=[1,2,3...]
mkswap			-- Setup a Linux swap area
	- mkswap [options] device [size]
!#mkswap -L SWAP-2 /dev/sdb2
swapon		-- enables devices and files for paging and swapping
!#swapon -s
!#swapon -p 5 -v /dev/sdb11		-- enables a device for swapping with priority of 5
swapoff		-- disables devices and files for paging and swapping
swapoff [options] [device]
!#swapoff -a -v		-- disable all swap devices and files
!#swapoff -v /dev/sdb11		--turn off particular device


=================================================================
    		FILE SYSTEMS
=================================================================
Extendded file system Ext(2|3|4)
----------------------------------------------------------------
Version 2 - no journaling
Version 3 - journaling added
Version 4 - still in active use
- max volume size 1 EiB
- max file size 16 TiB
- max filename lenght - 255 bytes
- backward compatible with ext3 and ext2

!!!Most common file systems:
86 NTFS voolume set da
87 NTFS volume set db
8e Linux LVM

tune2fs
---------------------------------------------------------------
adjust file system parameters on ext2/ext3/ext4

dumpe2fs
---------------------------------------------------------------
Dump ext2/ext3/ext4 file system information

resize2fs
---------------------------------------------------------------
Resize ext2/ext3/ext4 file system

----------------------------------------------------------------
Extents file system xfs
----------------------------------------------------------------
Max volume size:8 Eib
Max file size: 8 EiB
Max filename lenght - 255 bytes
Features:
-Journaling
-online defragmentation
-online resizing

xfs_info
xfs_growfs
xfs_admin

btrfs
---------------------------------------------------------------
Max volume size:16 Eib
Max file size: 16 EiB
Max filename lenght - 255 bytes
Features:
-Journaling
-online defragmentation
-online growth and shrinking
-transparent conmpresion
-snapshots

mkfs[.xxx]
---------------------------------------------------------------
Build a Linux file system
mkfs [options] device		-- creates the device(partition) in the desired filesystem
!mkfs -t ext4 /dev/sdb1		-- creates ext4 file system
!mkfs.xfs /dev/sdb2		-- creates xsf file system
!sudo mkfs.ext4 -L [LABEL] [device]	-- creates ext4 fs with LABEL on device

mount
---------------------------------------------------------------
mount a file system
mount [options] device directory
!we have to mount a filesystem in empty directory, when we mount a device, we are changing the directory purpose
!#mount /dev/sdb1 /media/disk1		--mount partition to a directory

!mount -t ext4 /dev/sdb1 /mnt/extraspace
!mount -a /dev/sdb1 /mnt/extraspace	-- creates ext4 file system on the 1st partition on the second hard disk in your system and mount it in /mnt/extraspace in read-write mode

umount

blkid
---------------------------------------------------------------
Locate or print block device attributes

---------------------------------------------------------------
Logical volume manager(LVM)
---------------------------------------------------------------
combines the phisical partitions into volume groups 
Volume groups can be separated into Logical volumes
Logical volumes can be formatted into file systems 

LVM tools
---------------------------------------------------------------
pvscan				--scans all disks for physical volumes
pvs					-- reports information about physical volumes
pvcreate			-- initialize a disk or partition for use by LVM
vgscan				
vgs
vgcreate			-- creates a volume group
vgcreate [options] group-name device		--

vgextend			-- adds physical volumes to a volume group

lvscan				-- scans all volumes in logical group
lvs					--  report information about logical volumes
lvcreate			-- creates a logical volume in an existing volume group
lvcreate [options] [lv-name] [options] [vg-name]		--creates logical volume in an existing volume group
!Ex.lvcreate -n lv1 -L 500m vg1			--create logical volume with name "lv1" with size of 500mb
lvextend [options] -L +100m [lv's path]		-- extends the size of the lv
!Ex. lvextend -L +100m /dev/vg1/lv1			-- increases the size of the "lv1" with 100m
!#sudo lvextend -l +100%FREE /dev/[volume group]/[logical volume]	-- increases the space to the maximum amout of capacity


=================================================================
    		ARCHIVING AND BACKUP
=================================================================
			-c(create)			   +z(gzip)
tar 		-t(list)   +v(verbose) +j(bzip2) +f (filename) [directory location which will be archived] 
			-(expand)			   +J(xz)
Ex. tar -czvf [filename].tar.gz /etc 		-- creating archive file

.tar -cvf			--TAR archive
.zip -ry			--ZIP archive
.tar.gz -cvzf		--GZIP archive
.tar.bz2 -cvjf		--BZIP2 archive
.tar.xz	-cvJf		--XZ archive

=================================================================
    		PROC
=================================================================
Folder, that consist of files, representing the process environment or how the system is seeing the 
system processes. We can interact with running system session. The folder is temporary.

=================================================================
    		RAM memory
=================================================================
free -mh	--shows RAM memory resources

========================================================
                  LVM
========================================================
https://fedoramagazine.org/reclaim-hard-drive-space-with-lvm/

LVM implementation:
----------------------------------------
Зависи ти типът шина
След това типът носител
LVM е вид софтуер. Какво изисква той?
Чак като имаш LVM правиш файлова система

========================================================
                  VDO(Virtual disk optimizer)
========================================================
https://youtu.be/bsERRxQ8S6c
